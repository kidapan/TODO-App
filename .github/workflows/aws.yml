name: Deploy to ECS

on:
  push:
    branches:
      - main  # main ブランチに push されたときに実行

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: express-demo-app
  ECS_CLUSTER: express-demo-app-cluster
  ECS_SERVICE: todo-app-service
  ECS_TASK_DEFINITION_NAME: express-demo-app-taskdef
  CONTAINER_NAME: express-demo-container  # ECS タスク定義内のコンテナ名
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # OIDC を使う場合に必要
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Get current task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} \
            --query 'taskDefinition' \
            --output json > task-definition.json

      - name: Create new task definition with updated image
        id: new-task-def
        run: |
          IMAGE_URI=${{ env.IMAGE_URI }}
          jq --arg IMAGE "$IMAGE_URI" --arg NAME "${{ env.CONTAINER_NAME }}" '
            .containerDefinitions |= map(
              if .name == $NAME then
                .image = $IMAGE
              else
                .
              end
            )
            | del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            )
          ' task-definition.json > new-task-def.json

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
